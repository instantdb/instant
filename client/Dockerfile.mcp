FROM node:23-alpine AS base

# Install libc6-compat for some binaries
RUN apk add --no-cache libc6-compat

# Set up pnpm in PATH
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"

WORKDIR /app

# -----
# prune
#  creates a directory with just the packages we need to build mcp
FROM base AS prune

RUN corepack enable

RUN pnpm install --global turbo@2.5.4

COPY . .

RUN turbo prune @instantdb/mcp --docker

# ----
# deps
#  Installs deps with the --prod flag to keep node_modules small(er)
FROM base AS deps

WORKDIR /app

RUN corepack enable

COPY --from=prune /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=prune /app/out/json/ .

RUN pnpm install --frozen-lockfile --prod

RUN ls node_modules
RUN ls packages/mcp/node_modules

# -----
# build
#  Builds the mcp server
FROM base AS build

WORKDIR /app
RUN corepack enable

# Copy pruned lockfile and package.json snapshots
COPY --from=prune /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=prune /app/out/json/ .

RUN pnpm install --frozen-lockfile

COPY --from=prune /app/out/full/ .

COPY tsconfig.base.json .

RUN pnpm exec turbo run build

# ------
# runner
#  This is the image that we'll deploy
FROM node:23-alpine AS runner

WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs \
  && adduser --system --uid 1001 mcp
USER mcp

# Copy only the production output from the builder
COPY --from=build --chown=mcp:nodejs /app/packages/mcp/package.json packages/mcp/package.json
COPY --from=build --chown=mcp:nodejs /app/packages/mcp/dist packages/mcp/dist

COPY --from=build --chown=mcp:nodejs /app/packages/core/package.json packages/core/package.json
COPY --from=build --chown=mcp:nodejs /app/packages/core/dist packages/core/dist

COPY --from=build --chown=mcp:nodejs /app/packages/admin/package.json packages/admin/package.json
COPY --from=build --chown=mcp:nodejs /app/packages/admin/dist packages/admin/dist

COPY --from=build --chown=mcp:nodejs /app/packages/platform/package.json packages/platform/package.json
COPY --from=build --chown=mcp:nodejs /app/packages/platform/dist packages/platform/dist

# Copy the node_modules from the deps that did pnpm i --prod
COPY --from=deps --chown=mcp:nodejs  /app/packages/mcp/node_modules packages/mcp/node_modules
COPY --from=deps --chown=mcp:nodejs  /app/packages/core/node_modules packages/core/node_modules
COPY --from=deps --chown=mcp:nodejs  /app/packages/admin/node_modules packages/admin/node_modules
COPY --from=deps --chown=mcp:nodejs  /app/packages/platform/node_modules packages/platform/node_modules
COPY --from=deps --chown=mcp:nodejs  /app/node_modules node_modules

ENV PORT=8000

EXPOSE 8000

CMD ["node", "packages/mcp/dist/index.js"]
