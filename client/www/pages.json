[
  {
    "sections": [
      {
        "title": "Getting started w/ React",
        "hash": null,
        "content": [
          "Instant is the Modern Firebase. With Instant you can easily build realtime and collaborative apps like Notion or Figma.",
          "Curious about what it's all about? Try a demo. Have questions? Join us on discord!",
          "And if you're ready, follow the quick start below to build a live app in less than 5 minutes!"
        ]
      },
      {
        "title": "Quick start",
        "hash": "quick-start",
        "content": [
          "To use Instant in a brand new project, fire up your terminal and run the following:",
          "Now open up app/page.tsx in your favorite editor and replace the entirety of the file with the following code.",
          "Go to localhost:3000, aand huzzah ðŸŽ‰ You've got your first Instant web app running! Check out the Working with data section to learn more about how to use Instant :)"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Getting started w/ React Native",
        "hash": null,
        "content": [
          "You can use Instant in React Native projects too! Below is an example using Expo. Open up your terminal and do the following:",
          "Now open up app/(tabs)/index.tsx in your favorite editor and replace the entirety of the file with the following code.",
          "If you haven't already, install the Expo Go app on iOS or Android. Once you have that installed you can run the app from your terminal.",
          "Scan the QR code with your phone and follow the instructions on the screen :)",
          "Huzzah ðŸŽ‰ You've got your first React Native Instant app running! Check out the Working with data section to learn more about how to use Instant!"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Getting started w/ Vanilla JS",
        "hash": null,
        "content": [
          "You can use Instant with plain ol' Javascript/Typescript too. You may find this helpful to integrate Instant with a framework that doesn't have an official SDK yet.",
          "To use Instant in a brand new project fire up your terminal set up a new project with Vite.",
          "Now open up src/main.ts in your favorite editor and replace the entirety of the file with the following code.",
          "Go to localhost:5173 and follow the final instruction to load the app!",
          "Huzzah ðŸŽ‰ You've got your first Instant web app running! Check out the Working with data section to learn more about how to use Instant :)"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Init",
        "hash": null,
        "content": []
      },
      {
        "title": "Basic Initialization",
        "hash": "basic-initialization",
        "content": [
          "The first step to using Instant in your app is to call init. Here is a simpleexample at the root of your app.",
          "With that, you can use db to write data, make queries, handle auth, and more!"
        ]
      },
      {
        "title": "Flexible Initialization",
        "hash": "flexible-initialization",
        "content": [
          "Instant maintains a single connection regardless of where or how many times youcall init with the same app ID. This means you can safely call init multipletimes without worrying about creating multiple connections orperformance overhead. However we do recommend the pattern of exporting areference from a utility file like so:"
        ]
      },
      {
        "title": "Typesafety",
        "hash": "typesafety",
        "content": [
          "If you're using typescript, init accepts a schema argument. Adding a schema provides auto-completion and typesafety for your queries and transactions.",
          "To learn more about writing schemas, head on over to the Modeling your data section."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Modeling data",
        "hash": null,
        "content": [
          "In this section weâ€™ll learn how to model data using Instant's schema. By the end of this document youâ€™ll know how to:",
          "Create namespaces and attributes",
          "Add indexes and unique constraints",
          "Model relationships",
          "Lock down your schema for production",
          "Weâ€™ll build a micro-blog to illustrate; we'll have authors, posts, comments, and tags."
        ]
      },
      {
        "title": "Schema as Code",
        "hash": "schema-as-code",
        "content": [
          "With Instant you can define your schema and your permissions in code. If you haven't already, use the CLI to generate an instant.schema.ts, and a instant.perms.ts file:",
          "The CLI will guide you through picking an Instant app and generate these files for you."
        ]
      },
      {
        "title": "instant.schema.ts",
        "hash": "instant-schema-ts",
        "content": [
          "Now we can define the data model for our blog!",
          "Open instant.schema.ts, and paste the following:",
          "Let's unpack what we just wrote. There are three core building blocks to model data with Instant: Namespaces, Attributes, and Links."
        ]
      },
      {
        "title": "1) Namespaces",
        "hash": "1-namespaces",
        "content": [
          "Namespaces are equivelant to \"tables\" in relational databases or \"collections\" in NoSQL. In our case, these are: $users, profiles, posts, comments, and tags.",
          "They're all defined in the entities section:"
        ]
      },
      {
        "title": "2) Attributes",
        "hash": "2-attributes",
        "content": [
          "Attributes are properties associated with namespaces. These are equivelant to a \"column\" in relational databases or a \"field\" in NoSQL. For the posts entity, we have the title, body, and createdAt attributes:",
          "Typing attributes",
          "Attributes can be typed as i.string(), i.number(), i.boolean(), i.date(), i.json(), or i.any().",
          "i.date() accepts dates as either a numeric timestamp (in milliseconds) or an ISO 8601 string. JSON.stringify(new Date()) will return an ISO 8601 string.",
          "When you type posts.title as a string:",
          "Instant will make sure that all title attributes are strings, and you'll get the proper typescript hints to boot!",
          "Unique constraints",
          "Sometimes you'll want to introduce a unique constraint. For example, say we wanted to add friendly URL's to posts. We could introduce a slug attribute:",
          "Since we're going to use post slugs in URLs, we'll want to make sure that no two posts can have the same slug. If we mark slug as unique, Instant will guarantee this constraint for us.",
          "Plus unique attributes come with their own special index. This means that if you use a unique attribute inside a query, we can fetch the object quickly:",
          "Indexing attributes",
          "Speaking of fast queries, let's take a look at one:",
          "What if we wanted to query for a post that was published at a particular date? Here's a query to get posts that were published during SpaceX's chopstick launch:",
          "This would work, but the more posts we create, the slower the query would get. We'd have to scan every post and compare the createdAt date.",
          "To make this query faster, we can index createdAt:",
          "As it says on the tin, this command tells Instant to index the createdAt field, which lets us quickly look up entities by this attribute."
        ]
      },
      {
        "title": "3) Links",
        "hash": "3-links",
        "content": [
          "Links connect two namespaces together. When you define a link, you define it both in the 'forward', and the 'reverse' direction. For example:",
          "This links posts and profiles together:",
          "posts.author links to one profiles entity",
          "profiles.authoredPosts links back to many posts entities.",
          "Since links are defined in both directions, you can query in both directions too:",
          "Links can have one of four relationship types: many-to-many, many-to-one, one-to-many, and one-to-one",
          "Our micro-blog example has the following relationship types:",
          "One-to-one between profiles and $users",
          "One-to-many between posts and profiles",
          "One-to-many between comments and posts",
          "One-to-many between comments and profiles",
          "Many-to-many between posts and tags",
          "Cascade Delete",
          "Links defined with has: \"one\" can set onDelete: \"cascade\". In this case, when the profile entity is deleted, all post entities will be deleted too:",
          "Without onDelete: \"cascade\", deleting a profile would simply delete the links but not delete the underlying posts.",
          "If you prefer to model links in other direction, you can do it, too:"
        ]
      },
      {
        "title": "Publishing your schema",
        "hash": "publishing-your-schema",
        "content": [
          "Now that you have your schema, you can use the CLI to push it to your app:",
          "The CLI will look at your app in production, show you the new columns you'd create, and run the changes for you!"
        ]
      },
      {
        "title": "Use schema for typesafety",
        "hash": "use-schema-for-typesafety",
        "content": [
          "You can also use your schema inside init:",
          "When you do this, all queries and transactions will come with typesafety out of the box.",
          "If you haven't used the CLI to push your schema yet, no problem. Any time you write transact, we'll automatically create missing entities for you."
        ]
      },
      {
        "title": "Update or Delete attributes",
        "hash": "update-or-delete-attributes",
        "content": [
          "You can always modify or delete attributes after creating them. You can't use the CLI to do this yet, but you can use the dashboard.",
          "Say we wanted to rename posts.createdAt to posts.publishedAt:",
          "Go to your Dashboard",
          "Click \"Explorer\"",
          "Click \"posts\"",
          "Click \"Edit Schema\"",
          "Click createdAt",
          "You'll see a modal that you can use to rename the attribute, index it, or delete it:"
        ]
      },
      {
        "title": "Secure your schema with permissions",
        "hash": "secure-your-schema-with-permissions",
        "content": [
          "In the earlier sections we mentioned that new entities and attributes can be created on the fly when you call transact. This can be useful for development, but you may not want this in production.",
          "To prevent changes to your schema on the fly, simply add these permissions to your app.",
          "Once you push these permissions to production:",
          "You'll still be able to make changes in the explorer or with the CLI, but client-side transactions that try to modify your schema will fail. This means your schema is safe from unwanted changes!",
          "If you've made it this far, congratulations! You should now be able to fully customize and lock down your data model. Huzzah!"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Writing data",
        "hash": null,
        "content": [
          "Instant uses a Firebase-inspired interface for mutations. We call our mutation language InstaML"
        ]
      },
      {
        "title": "Update data",
        "hash": "update-data",
        "content": [
          "We use the update action to create entities.",
          "This creates a new goal with the following properties:",
          "It's identified by a randomly generated id via the id() function.",
          "It has an attribute title with value eat.",
          "Similar to NoSQL, you don't need to use the same schema for each entity in a namespace. After creating the previous goal you can run the following:",
          "You can store strings, numbers, booleans, arrays, and objects as values. You can also generate values via functions. Below is an example for picking a random goal title.",
          "The update action is also used for updating entities. Suppose we had created the following goal",
          "We eat some food and decide to update the goal. We can do that like so:",
          "This will only update the value of the lastTimeEaten attribute for entity eat."
        ]
      },
      {
        "title": "Merge data",
        "hash": "merge-data",
        "content": [
          "When you update an attribute, you overwrite it. This is fine for updatingvalues of strings, numbers, and booleans. But if you use update to overwritejson objects you may encounter two problems:",
          "You lose any data you didn't specify.",
          "You risk clobbering over changes made by other clients.",
          "For example, imagine we had a game entity, that stored a state of favorite colors:",
          "To make working with deeply-nested, document-style JSON values a breeze, we created merge.Similar to lodash's merge function,merge allows you to specify the slice of data you want to update:",
          "merge only merges objects. Calling merge on arrays, numbers, or booleans will overwrite the values.",
          "Sometimes you may want to remove keys from a nested object. You can do so by calling merge with a key set to null or undefined. This will remove the corresponding property from the object."
        ]
      },
      {
        "title": "Delete data",
        "hash": "delete-data",
        "content": [
          "The delete action is used for deleting entities.",
          "You can generate an array of delete txs to delete all entities in a namespace",
          "Calling delete on an entity also deletes its associations. So no need to worry about cleaning up previously created links."
        ]
      },
      {
        "title": "Link data",
        "hash": "link-data",
        "content": [
          "link is used to create associations.",
          "Suppose we create a goal and a todo.",
          "We can associate healthId with workoutId like so:",
          "We could have done all this in one transact too via chaining transaction chunks.",
          "You can specify multiple ids in one link as well:",
          "Links are bi-directional. Say we link healthId to workoutId",
          "We can query associations in both directions"
        ]
      },
      {
        "title": "Unlink data",
        "hash": "unlink-data",
        "content": [
          "Links can be removed via unlink.",
          "This removes links in both directions. Unlinking can be done in either direction so unlinking workoutId from healthId would have the same effect.",
          "We can unlink multiple ids too:"
        ]
      },
      {
        "title": "Lookup by unique attribute",
        "hash": "lookup-by-unique-attribute",
        "content": [
          "If your entity has a unique attribute, you can use lookup in place of the id to perform updates.",
          "The lookup function takes the attribute as its first argument and the unique attribute value as its second argument.",
          "When it is used in a transaction, the updates will be applied to the entity that has the unique value. If no entity has the value, then a new entity with a random id will be created with the value.",
          "It can be used with update, delete, merge, link, and unlink.",
          "When used with links, it can also be used in place of the linked entity's id."
        ]
      },
      {
        "title": "Typesafety",
        "hash": "typesafety",
        "content": [
          "By default, db.transact is permissive. When you save data, we'll create missing attributes for you:",
          "As your app grows, you may want to start enforcing types. When you're ready, you can start using a schema:",
          "If your schema includes a todos.dueDate for example:",
          "Instant will enforce that todos.dueDate are actually dates, and you'll get some nice intellisense to boot:",
          "Instant also comes with a few utility types, which can help you write abstractions over transact. For example, say you wanted to write a custom update function:",
          "You can use the UpdateParams utility to make sure arguments follow the schema:",
          "And the LinkParams utility do the same for links:",
          "To learn more about writing schemas, check out the Modeling Data section."
        ]
      },
      {
        "title": "Batching transactions",
        "hash": "batching-transactions",
        "content": [
          "If you have a large number of transactions to commit, you'll want to batch themto avoid hitting transaction limits and time outs.",
          "Suppose we want to create 3000 goals. Here's how we can batch them into 30 transactions of 100 goals each."
        ]
      },
      {
        "title": "Using the tx proxy object",
        "hash": "using-the-tx-proxy-object",
        "content": [
          "db.tx is a proxy object which creates transaction chunks to be committed via db.transact. It follows the format",
          "NAMESPACE_LABEL refers to the namespace to commit (e.g. goals, todos)",
          "ENTITY_IDENTIFIER is the id to look up in the namespace. This id must be a uuid and unique to the namespace. You can use the id() function to generate a uuid for convenience.",
          "ACTION is one of update, delete, link, unlink",
          "ACTION_SPECIFIC_DATA depends on the actionupdate takes in an object of information to commitdelete is the only action that doesn't take in any data,link and unlink takes an object of label-entity pairs to create/delete associations",
          "update takes in an object of information to commit",
          "delete is the only action that doesn't take in any data,",
          "link and unlink takes an object of label-entity pairs to create/delete associations"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Reading data",
        "hash": null,
        "content": [
          "Instant uses a declarative syntax for querying. It's like GraphQL without the configuration. Here's how you can query data with InstaQL."
        ]
      },
      {
        "title": "Fetch namespace",
        "hash": "fetch-namespace",
        "content": [
          "One of the simplest queries you can write is to simply get all entities of a namespace.",
          "Inspecting data, we'll see:",
          "For comparison, the SQL equivalent of this would be something like:"
        ]
      },
      {
        "title": "Fetch multiple namespaces",
        "hash": "fetch-multiple-namespaces",
        "content": [
          "You can fetch multiple namespaces at once:",
          "We will now see data for both namespaces.",
          "The equivalent of this in SQL would be to write two separate queries."
        ]
      },
      {
        "title": "Fetch a specific entity",
        "hash": "fetch-a-specific-entity",
        "content": [
          "If you want to filter entities, you can use the where keyword. Here we fetch a specific goal",
          "The SQL equivalent would be:"
        ]
      },
      {
        "title": "Fetch associations",
        "hash": "fetch-associations",
        "content": [
          "We can fetch goals and their related todos.",
          "goals would now include nested todos",
          "Comparing with SQL",
          "The SQL equivalent for this would be something along the lines of:",
          "Notice the complexity of this SQL query. Although fetching associations in SQL is straightforward via JOIN, marshalling the results in a nested structure via SQL is tricky. An alternative approach would be to write two straight-forward queries and then marshall the data on the client.",
          "Now compare these two approaches with InstaQL",
          "Modern applications often need to render nested relations, InstaQL really starts to shine for these use cases."
        ]
      },
      {
        "title": "Fetch specific associations",
        "hash": "fetch-specific-associations",
        "content": [
          "A) Fetch associations for filtered namespace",
          "We can fetch a specific entity in a namespace as well as it's related associations.",
          "Which returns",
          "B) Filter namespace by associated values",
          "We can filter namespaces by their associations",
          "Returns",
          "C) Filter associations",
          "We can also filter associated data.",
          "This will return goals and filtered todos",
          "Notice the difference between these three cases.",
          "A) Fetched all todos for goal with id health",
          "B) Filtered goals with a least one todo titled Code a bunch",
          "C) Fetched all goals and filtered associated todos by title Go on a run"
        ]
      },
      {
        "title": "Inverse Associations",
        "hash": "inverse-associations",
        "content": [
          "Associations are also available in the reverse order."
        ]
      },
      {
        "title": "Defer queries",
        "hash": "defer-queries",
        "content": [
          "You can also defer queries until a condition is met. This is useful when youneed to wait for some data to be available before you can run your query. Here'san example of deferring a fetch for todos until a user is logged in."
        ]
      },
      {
        "title": "Pagination",
        "hash": "pagination",
        "content": [
          "You can limit the number of items from a top level namespace by adding a limit to the option map:",
          "Instant supports both offset-based and cursor-based pagination for top-levelnamespaces.",
          "Offset",
          "To get the next page, you can use an offset:",
          "In a React application, your offset-based pagination code might look something like this:",
          "Cursors",
          "You can also get the next page with the endCursor returned in the pageInfo map from the previous result:",
          "To get the previous page, use the startCursor in the before field of the option map and ask for the last items:",
          "In a React application, your cursor-based pagination code might look something like this:",
          "Ordering",
          "The default ordering is by the time the objects were created, in ascending order. You can change the order with the order key in the option map for top-level namespaces:",
          "The serverCreatedAt field is a reserved key that orders by the time that the object was first persisted on the Instant backend. It can take the value 'asc' (the default) or 'desc'.",
          "You can also order by any attribute that is indexed and has a checked type.",
          "Add indexes and checked types to your attributes from the Explorer on the Instant dashboard or from the cli with Schema-as-code."
        ]
      },
      {
        "title": "Advanced filtering",
        "hash": "advanced-filtering",
        "content": [
          "And",
          "The where clause supports multiple keys which will filter entities that match all of the conditions.",
          "You can also provide a list of queries under the and key.",
          "Multiple keys in a single where:",
          "and key:",
          "The and key is useful when you want an entity to match multiple conditions.In this case we want to find goals that have both Drink protein and Go on a run todos.:",
          "OR",
          "The where clause supports or queries that will filter entities that match any of the clauses in the provided list:",
          "$in",
          "The where clause supports $in queries that will filter entities that match any of the items in the provided list.You can think of this as a shorthand for or on a single key.",
          "Comparison operators",
          "The where clause supports comparison operators on fields that are indexed and have checked types.",
          "Add indexes and checked types to your attributes from the Explorer on the Instant dashboard or from the cli with Schema-as-code.",
          "Dates can be stored as timestamps (milliseconds since the epoch, e.g. Date.now()) or as ISO 8601 strings (e.g. JSON.stringify(new Date())) and can be queried in the same formats:",
          "If you try to use comparison operators on data that isn't indexed and type-checked, you'll get an error:",
          "$not",
          "The where clause supports $not queries that will return entities that don'tmatch the provided value for the field, including entities where the field is null or undefined.",
          "$isNull",
          "The where clause supports $isNull queries that will filters entities by whether the field value is either null or undefined.",
          "Set $isNull to true to return entities where where the field is null or undefined.",
          "Set $isNull to false to return entities where the field is not null and not undefined.",
          "$like",
          "The where clause supports $like on fields that are indexed with a checked string type.",
          "$like queries will return entities that match a case sensitive substring of the provided value for the field.",
          "For case insensitive matching use $ilike in place of $like.",
          "Here's how you can do queries like startsWith, endsWith and includes.",
          "Here's how you can use $like to find all goals that end with the word\"promoted!\"",
          "You can use $like in nested queries as well",
          "Returns",
          "Case-insensitive matching with $ilike:"
        ]
      },
      {
        "title": "Typesafety",
        "hash": "typesafety",
        "content": [
          "By default, db.useQuery is permissive. You don't have to tell us your schema upfront, and you can write any kind of query:",
          "As your app grows, you may want to start enforcing types. When you're ready you can write a schema:",
          "If your schema includes goals and todos for example:",
          "Intellisense",
          "Instant will start giving you intellisense for your queries. For example, if you're querying for goals, you'll see that only todos can be associated:",
          "And if you hover over data, you'll see the actual typed output of your query:",
          "Utility Types",
          "Instant also comes with some utility types to help you use your schema in TypeScript.",
          "For example, you could define your query upfront:",
          "Or you can define your result type:",
          "Or you can extract a particular entity:",
          "You can specify links relative to your entity too:",
          "To learn more about writing schemas, check out the Modeling Data section."
        ]
      },
      {
        "title": "Query once",
        "hash": "query-once",
        "content": [
          "Sometimes, you don't want a subscription, and just want to fetch data once. For example, you might want to fetch data before rendering a page or check whether a user name is available.",
          "In these cases, you can use queryOnce instead of useQuery. queryOnce returns a promise that resolves with the data once the query is complete.",
          "Unlike useQuery, queryOnce will throw an error if the user is offline. This is because queryOnce is intended for use cases where you need the most up-to-date data.",
          "You can also do pagination with queryOnce:"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Instant on the backend",
        "hash": null,
        "content": [
          "You can use Instant on the server as well! This can be especially useful forrunning scripts, custom auth flows, or sensitive application logic."
        ]
      },
      {
        "title": "Admin SDK",
        "hash": "admin-sdk",
        "content": [
          "We currently offer a javascript library @instantdb/admin for using Instant ina non-browser context. This library is similar to our client SDK with a fewtweaks.",
          "init",
          "Similar to @instantdb/react, you must init before doing any queries orwrites. Running init authenticates you against our admin API. In addition toproviding your appId, you must also provide your adminToken.",
          "Whereas exposing your appId in source control is fine, it's not safeto expose your admin token. Permission checks will not run for queries andwrites from our admin API. Be sure to regenerate your token from your dashboardif it accidentally leaks."
        ]
      },
      {
        "title": "Reading and Writing Data",
        "hash": "reading-and-writing-data",
        "content": [
          "query and transact let you read and write data as an admin.",
          "query",
          "In react we export useQuery to enable \"live queries\", queries that willautomatically update when data changes.",
          "In the admin SDK we instead export an async query function that simply fires aquery once and returns a result.",
          "transact",
          "transact is an async function that behaves nearly identical to transactfrom @instantdb/react. It returns a tx-id on success."
        ]
      },
      {
        "title": "Schema",
        "hash": "schema",
        "content": [
          "init also accepts a schema argument:",
          "If you add a schema, db.query and db.transact will come with autocompletion and typesafety out of the box. The backend will also use your schema to generate missing attributes.",
          "To learn more about writing schemas, head on over to the Modeling your data section."
        ]
      },
      {
        "title": "Impersonating users",
        "hash": "impersonating-users",
        "content": [
          "When you use the admin SDK, you can make any query or transaction. As an admin, you bypass permissions.But, sometimes you want to make queries on behalf of your users, and would like to respect permissions.",
          "You can do this with the db.asUser function."
        ]
      },
      {
        "title": "Retrieve a user",
        "hash": "retrieve-a-user",
        "content": [
          "As an admin, you can retrieve an app user record by email, id, or refresh_token. You can do this with the db.auth.getUser function."
        ]
      },
      {
        "title": "Delete a user",
        "hash": "delete-a-user",
        "content": [
          "You can also delete an app user record by email, id, or refresh_token. You can do this with the db.auth.deleteUser function.",
          "Note that this only deletes the user record. It does not delete all user data. If you want to delete all of a user's data, you'll need to do it manually:"
        ]
      },
      {
        "title": "Sign Out",
        "hash": "sign-out",
        "content": [
          "The db.auth.signOut method allows you to log out a user by invalidating any tokensassociated with their email. This can be useful when you want to forcibly log out a user from your application:"
        ]
      },
      {
        "title": "Custom Auth",
        "hash": "custom-auth",
        "content": [
          "You can use the Admin SDK to create your own authentication flows. To implement custom auth flows, you would make one change in your backend, and one change in your frontend. Here's how it would look:",
          "1. Backend: db.auth.createToken",
          "Create a new sign-in endpoint in your backend.",
          "This endpoint will use db.auth.createToken to generate an authentication token for the user:",
          "If a user with this email does not exist, auth.createToken will create a user for you.",
          "Right now we require that every user must have an email. If you need to relax this constraint let us know.",
          "2. Frontend: db.auth.signInWithToken",
          "Once your frontend calls your sign-in endpoint, it can then use the generated token and sign a user in with db.auth.signInWithToken.",
          "Here's a full example:"
        ]
      },
      {
        "title": "Generating magic codes",
        "hash": "generating-magic-codes",
        "content": [
          "We support a magic code flow out of the box. However, if you'd like to use your own email provider to send the code, you can do this with db.auth.generateMagicCode function:"
        ]
      },
      {
        "title": "Authenticated Endpoints",
        "hash": "authenticated-endpoints",
        "content": [
          "You can also use the admin SDK to authenticate users in your custom endpoints. This would have two steps:",
          "1. Frontend: user.refresh_token",
          "In your frontend, the user object has a refresh_token property. You can pass this token to your endpoint:",
          "2. Backend: auth.verifyToken",
          "You can then use auth.verifyToken to verify the refresh_token that was passed in."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Patterns",
        "hash": null,
        "content": [
          "Below are some common patterns for working with InstantDB. We'll add morepatterns over time and if you have a pattern you'd like to share, please feelfree to submit a PR for this page."
        ]
      },
      {
        "title": "You can expose your app id to the client.",
        "hash": "you-can-expose-your-app-id-to-the-client",
        "content": [
          "Similar to Firebase, the app id is a unique identifier for your application.If you want to secure your data, you'll want to addpermissions for the app."
        ]
      },
      {
        "title": "Restrict creating new attributes.",
        "hash": "restrict-creating-new-attributes",
        "content": [
          "When your ready to lock down your schema, you can restrict creating a newattribute by adding this to your app's permissions",
          "This will prevent any new attributes from being created."
        ]
      },
      {
        "title": "Specify attributes you want to query.",
        "hash": "specify-attributes-you-want-to-query",
        "content": [
          "When you query a namespace, it will return all the attributes for an entity.We don't currently support specifying which attributes you want to query.",
          "This means if you have private data in an entity, or some larger data you want to fetch sometimes, you'll want to split the entity into multiple namespaces. Here's an example"
        ]
      },
      {
        "title": "Setting limits via permissions.",
        "hash": "setting-limits-via-permissions",
        "content": [
          "If you want to limit the number of entities a user can create, you can do so viapermissions. Here's an example of limiting a user to creating at most 2 todos.",
          "First the schema:",
          "Then the permissions:"
        ]
      },
      {
        "title": "Listen to InstantDB connection status.",
        "hash": "listen-to-instant-db-connection-status",
        "content": [
          "Sometimes you want to let clients know when they are connected or disconnectedto the DB. You can use db.subscribeConnectionStatus in vanilla JS ordb.useConnectionStatus in React to listen to connection changes"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Showcase",
        "hash": null,
        "content": []
      },
      {
        "title": "Sample Apps",
        "hash": "sample-apps",
        "content": [
          "Here are some sample apps showing how to use Instant to build a real app.",
          "Instldraw - collaborative drawing app built with Instant.",
          "Instant Awedience - simple chat app with presence, typing indicators, and reactions!.",
          "Glazepal - React Native app for managing ceramic glazes",
          "Stroopwafel - casual multiplayergame built with React Native."
        ]
      },
      {
        "title": "Real World Apps",
        "hash": "real-world-apps",
        "content": [
          "Here are some apps in production that are powered by Instant.",
          "Palette.tools - Palette is a modern, all-in-one project management app for studios & digital artists ðŸŽ¨",
          "Mentor - Simplify your goals and get things done with mentor, your personal assistant",
          "Subset - A high-quality, no-frills, modern spreadsheet"
        ]
      },
      {
        "title": "More examples",
        "hash": "more-examples",
        "content": [
          "Are you looking for more examples? Do you want to contribute your app to this list? Let us know on discord or twitter"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Auth",
        "hash": null,
        "content": [
          "Instant comes with support for auth. We currently offer magic codes, Google OAuth, SignÂ In with Apple, and Clerk. If you want to build your own flow, you can use the Admin SDK."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Magic codes",
        "hash": null,
        "content": [
          "Instant supports a \"magic-code\" flow for auth. Users provide their email, we sendthem a login code on your behalf, and they authenticate with your app. Here'show you can do it with react."
        ]
      },
      {
        "title": "Full Magic Code Example",
        "hash": "full-magic-code-example",
        "content": [
          "The example below shows how to use magic codes in a React app. If you're lookingfor an example with vanilla JS, check out this sandbox.",
          "Open up your app/page.tsx file, and replace the entirety of it with the following code:",
          "Go to localhost:3000, aand huzzah ðŸŽ‰ You've got auth.",
          "Let's dig deeper.",
          "We created a Login component to handle our auth flow. Of note is auth.sendMagicCodeand auth.signInWithMagicCode.",
          "On successful validation, Instant's backend will return a user object with a refresh token.The client SDK will then restart the websocket connection with Instant's sync layer and provide the refresh token.",
          "When doing useQuery or transact, the refresh token will be used to hydrate authon the backend during permission checks.",
          "On the client, useAuth will set isLoading to false and populate user -- huzzah!"
        ]
      },
      {
        "title": "useAuth",
        "hash": "use-auth",
        "content": [
          "Use useAuth to fetch the current user. Here we guard against loadingour Main component until a user is logged in"
        ]
      },
      {
        "title": "Send a Magic Code",
        "hash": "send-a-magic-code",
        "content": [
          "Use auth.sendMagicCode to generate a magic code on instant's backend and email it to the user."
        ]
      },
      {
        "title": "Sign in with Magic Code",
        "hash": "sign-in-with-magic-code",
        "content": [
          "You can then use auth.signInWithMagicCode to authenticate the user with the magic code they provided."
        ]
      },
      {
        "title": "Sign out",
        "hash": "sign-out",
        "content": [
          "Use auth.signOut from the client to invalidate the user's refresh token andsign them out.You can also use the admin SDK to sign out the user from theserver."
        ]
      },
      {
        "title": "Get auth",
        "hash": "get-auth",
        "content": [
          "For scenarios where you want to know the current auth state without subscribingto changes, you can use getAuth."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Google OAuth",
        "hash": null,
        "content": [
          "Instant supports logging in your users with their Google account.We support flows for Web and React Native. Follow the steps below to get started.",
          "Step 1: Configure OAuth consent screenGo to the Google Console.",
          "Click \"CONFIGURE CONSENT SCREEN.\" If you already have a consent screen, you can skip to the next step.",
          "Select \"External\" and click \"CREATE\".",
          "Add your app's name, a support email, and developer contact information. Click \"Save and continue\".",
          "No need to add scopes or test users. Click \"Save and continue\" for the nextscreens. Until you reach the \"Summary\" screen, click \"Back to dashboard\".",
          "Step 2: Create an OAuth client for GoogleFrom Google Console, click \"+ CREATE CREDENTIALS\"",
          "Select \"OAuth client ID\"",
          "Select \"Web application\" as the application type.",
          "Add https://api.instantdb.com/runtime/oauth/callback as an Authorized redirect URI.",
          "If you're testing from localhost, add both http://localhost and http://localhost:3000 to \"Authorized JavaScript origins\", replacing 3000 with the port you use.For production, add your website's domain.",
          "Step 3: Register your OAuth client with Instant",
          "Go to the Instant dashboard and select the Auth tab for your app.",
          "Register a Google client and enter the client id and client secret from the OAuth client that you created.",
          "Step 4: Register your website with Instant",
          "In the Auth tab, add the url of the websites where you are using Instant to the Redirect Origins.If you're testing from localhost, add http://localhost:3000, replacing 3000 with the port you use.For production, add your website's domain.",
          "Step 5: Add login to your app",
          "The next sections will show you how to use your configured OAuth client with Instant."
        ]
      },
      {
        "title": "Native button for Web",
        "hash": "native-button-for-web",
        "content": [
          "You can use Google's Sign in Button with Instant. You'll use db.auth.SignInWithIdToken to authenticate your user.The benefit of using Google's button is that you can display your app's name in the consent screen.",
          "First, make sure that your website is in the list of \"Authorized JavaScript origins\" for your Google client on the Google console.",
          "If you're using React, the easiest way to include the signin button is through the @react-oauth/google package.",
          "Include the button and use db.auth.signInWithIdToken to complete sign in.Here's a full example",
          "If you're not using React or prefer to embed the button yourself, refer to Google's docs on how to create the button and load their client library. When creating your button, make sure to set the data-ux_mode=\"popup\". Your data-callback function should look like:"
        ]
      },
      {
        "title": "Redirect flow for Web",
        "hash": "redirect-flow-for-web",
        "content": [
          "If you don't want to use the google styled buttons, you can use the redirect flow instead.",
          "Simply create an authorization URL via db.auth.createAuthorizationURL and then use the url to create a link. Here's a full example:",
          "When your users clicks on the link, they'll be redirected to Google to start the OAuth flow and then back to your site. Instant will automatically log them in to your app when they are redirected."
        ]
      },
      {
        "title": "Webview flow on React Native",
        "hash": "webview-flow-on-react-native",
        "content": [
          "Instant comes with support for Expo's AuthSession library. If you haven't already, follow the AuthSession installation instructions from the Expo docs.",
          "Next, add the following dependencies:",
          "Update your app.json with your scheme:",
          "From the Auth tab on the Instant dashboard, add a redirect origin of type \"App scheme\". For development with expo add exp:// and your scheme, e.g. mycoolredirect://.",
          "Now you're ready to add a login button to your expo app. Here's a full example"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Sign In with Apple",
        "hash": null,
        "content": [
          "Instant supports SignÂ In with Apple on the Web and in native applications."
        ]
      },
      {
        "title": "Step 1: Create App ID",
        "hash": "step-1-create-app-id",
        "content": [
          "Navigate to Certificates, Identifiers & Profiles",
          "Select Identifiers",
          "Click +",
          "Register a new identifier â†’ Select App IDs",
          "Select a type â†’ Select App",
          "Capabilities â†’ Sign In with Apple â†’ Check",
          "Fill in Bundle ID and Description",
          "Click Register"
        ]
      },
      {
        "title": "Step 2: Create Services ID",
        "hash": "step-2-create-services-id",
        "content": [
          "Navigate to Services IDs",
          "Click +",
          "Register a new identifier â†’ Select Services IDs",
          "Fill in Description and Identifier. Youâ€™ll need this Identifier later",
          "Click Register"
        ]
      },
      {
        "title": "Step 3: Configure Services ID (Web Popup flow)",
        "hash": "step-3-configure-services-id-web-popup-flow",
        "content": [
          "Select newly created Services ID",
          "Enable Sign In with Apple",
          "Click Configure",
          "Select Primary App ID from Step 1",
          "To Domains, add your app domain (e.g. myapp.com)",
          "To Return URLs, add URL of your app where authentication happens (e.g. https://myapp.com/signin)",
          "Click Continue â†’ Save"
        ]
      },
      {
        "title": "Step 3: Configure Services ID (Web Redirect flow)",
        "hash": "step-3-configure-services-id-web-redirect-flow",
        "content": [
          "Select newly created Services ID",
          "Enable Sign In with Apple",
          "Click Configure",
          "Select Primary App ID from Step 1",
          "To Domains, add api.instantdb.com",
          "To Return URLs, add https://api.instantdb.com/runtime/oauth/callback",
          "Click Continue â†’ Save"
        ]
      },
      {
        "title": "Step 3.5: Generate Private Key (Web Redirect flow only)",
        "hash": "step-3-5-generate-private-key-web-redirect-flow-only",
        "content": [
          "Navigate to Keys",
          "Click +",
          "Fill in Name and Description",
          "Check Sign in with Apple",
          "Configure â†’ select App ID from Step 1",
          "Continue â†’ Register",
          "Download key file"
        ]
      },
      {
        "title": "Step 3: Configure Services ID (React Native flow)",
        "hash": "step-3-configure-services-id-react-native-flow",
        "content": [
          "This step is not needed for Expo."
        ]
      },
      {
        "title": "Step 4: Register your OAuth client with Instant",
        "hash": "step-4-register-your-o-auth-client-with-instant",
        "content": [
          "Go to the Instant dashboard and select Auth tab.",
          "Select Add Apple Client",
          "Select unique clientName (apple by default, will be used in db.auth calls)",
          "Fill in _Services ID_ from Step 2<!-- prettier-ignore -->Fill in Team ID from Membership detailsFill in Key ID from Step 3.5Fill in _Private Key_ by copying file content from Step 3.5<!-- prettier-ignore -->Click Add Apple ClientStep 4.5: Whitelist your domain in Instant (Web Redirect flow only)In Instant Dashboard, Click Redirect Origins â†’ Add an originAdd your appâ€™s domain (e.g. myapp.com)Step 5: Add Sign In code to your app (Web Popup flow)Add Apple Sign In library to your app:https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js\nInitialize with Services ID from Step 2:AppleID.auth.init({\n  clientId: '<Services ID>',\n  scope: 'name email',\n  redirectURI: window.location.href,\n});\nImplement signInPopup using clientName from Step 4:async function signInPopup() {\n  let nonce = crypto.randomUUID();\n\n  // authenticate with Apple\n  let resp = await AppleID.auth.signIn({\n    nonce: nonce,\n    usePopup: true,\n  });\n\n  // authenticate with Instant\n  await db.auth.signInWithIdToken({\n    clientName: '<clientName>',\n    idToken: resp.authorization.id_token,\n    nonce: nonce,\n  });\n}\nAdd Sign In button:<button onClick={signInPopup}>Sign In with Apple</button>\nStep 5: Add Sign In code to your app (Web Popup flow)Create Sign In link using clientName from Step 4:const authUrl = db.auth.createAuthorizationURL({\n  clientName: '<clientName>',\n  redirectURL: window.location.href,\n});\nAdd a link uses authUrl:<a href={ authUrl }>Sign In with Apple</a>\nThatâ€™s it!Step 5: Add Sign In code to your app (React Native flow)Instant comes with support for Expo AppleAuthentication library.Add dependency:npx expo install expo-apple-authentication\nUpdate app.json by adding:{\n  \"expo\": {\n    \"ios\": {\n      \"usesAppleSignIn\": true\n    }\n  }\n}\nGo to Instant dashboard â†’ Auth tab â†’ Redirect Origins â†’ Add an origin.Add exp:// for development with Expo.Authenticate with Apple and then pass identityToken to Instant along with clientName from Step 4:const [nonce] = useState('' + Math.random());\ntry {\n  // sign in with Apple\n  const credential = await AppleAuthentication.signInAsync({\n    requestedScopes: [\n      AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n      AppleAuthentication.AppleAuthenticationScope.EMAIL,\n    ],\n    nonce: nonce,\n  });\n\n  // pass identityToken to Instant\n  db.auth\n    .signInWithIdToken({\n      clientName: '<clientName>',\n      idToken: credential.identityToken,\n      nonce: nonce,\n    })\n    .catch((err) => {\n      console.log('Error', err.body?.message, err);\n    });\n} catch (e) {\n  if (e.code === 'ERR_REQUEST_CANCELED') {\n    // handle that the user canceled the sign-in flow\n  } else {\n    // handle other errors\n  }\n}\nSign out code:<Button\n  title=\"Sign Out\"\n  onPress={async () => {\n    await db.auth.signOut();\n  }}\n/>\nFull example:import React, { useState } from 'react';\nimport { Button, View, Text, StyleSheet } from 'react-native';\nimport { init, tx } from '@instantdb/react-native';\nimport * as AppleAuthentication from 'expo-apple-authentication';\n\nconst APP_ID = '__APP_ID__';\nconst db = init({ appId: APP_ID });\n\nexport default function App() {\n  const { isLoading, user, error } = db.useAuth();\n  if (isLoading) {\n    return (\n      <View style={styles.container}>\n        <Text>Loading...</Text>\n      </View>\n    );\n  }\n  if (error) {\n    return (\n      <View style={styles.container}>\n        <Text>Uh oh! {error.message}</Text>\n      </View>\n    );\n  }\n  if (user) {\n    return (\n      <View style={styles.container}>\n        <Text>Hello {user.email}!</Text>\n        <Button\n          title=\"Sign Out\"\n          onPress={async () => {\n            await db.auth.signOut();\n          }}\n        />\n      </View>\n    );\n  }\n  return <Login />;\n}\n\nfunction Login() {\n  const [nonce] = useState('' + Math.random());\n  return (\n    <View style={styles.container}>\n      <AppleAuthentication.AppleAuthenticationButton\n        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}\n        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}\n        cornerRadius={5}\n        style={styles.button}\n        onPress={async () => {\n          try {\n            const credential = await AppleAuthentication.signInAsync({\n              requestedScopes: [\n                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,\n                AppleAuthentication.AppleAuthenticationScope.EMAIL,\n              ],\n              nonce: nonce,\n            });\n            // signed in\n            db.auth\n              .signInWithIdToken({\n                clientName: 'apple',\n                idToken: credential.identityToken,\n                nonce: nonce,\n              })\n              .catch((err) => {\n                console.log('Error', err.body?.message, err);\n              });\n          } catch (e) {\n            if (e.code === 'ERR_REQUEST_CANCELED') {\n              // handle that the user canceled the sign-in flow\n            } else {\n              // handle other errors\n            }\n          }\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    width: 200,\n    height: 44,\n  },\n});\n"
        ]
      },
      {
        "title": "Step 4.5: Whitelist your domain in Instant (Web Redirect flow only)",
        "hash": "step-4-5-whitelist-your-domain-in-instant-web-redirect-flow-only",
        "content": [
          "In Instant Dashboard, Click Redirect Origins â†’ Add an origin",
          "Add your appâ€™s domain (e.g. myapp.com)"
        ]
      },
      {
        "title": "Step 5: Add Sign In code to your app (Web Popup flow)",
        "hash": "step-5-add-sign-in-code-to-your-app-web-popup-flow",
        "content": [
          "Add Apple Sign In library to your app:",
          "Initialize with Services ID from Step 2:",
          "Implement signInPopup using clientName from Step 4:",
          "Add Sign In button:"
        ]
      },
      {
        "title": "Step 5: Add Sign In code to your app (Web Popup flow)",
        "hash": "step-5-add-sign-in-code-to-your-app-web-popup-flow-2",
        "content": [
          "Create Sign In link using clientName from Step 4:",
          "Add a link uses authUrl:",
          "Thatâ€™s it!"
        ]
      },
      {
        "title": "Step 5: Add Sign In code to your app (React Native flow)",
        "hash": "step-5-add-sign-in-code-to-your-app-react-native-flow",
        "content": [
          "Instant comes with support for Expo AppleAuthentication library.",
          "Add dependency:",
          "Update app.json by adding:",
          "Go to Instant dashboard â†’ Auth tab â†’ Redirect Origins â†’ Add an origin.",
          "Add exp:// for development with Expo.",
          "Authenticate with Apple and then pass identityToken to Instant along with clientName from Step 4:",
          "Sign out code:",
          "Full example:"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Clerk",
        "hash": null,
        "content": [
          "Instant supports delegating auth to Clerk."
        ]
      },
      {
        "title": "Setup",
        "hash": "setup",
        "content": [
          "Step 1: Configure Clerk",
          "Go to your Clerk dashboard, navigate to Sessions, then click the Edit button in the Customize session token section.",
          "Add the email claim to your session token:",
          "You can have additional claims as long as the email claim is set to {{user.primary_email_address}}.",
          "",
          "Step 2: Get your Clerk Publishable key",
          "On the Clerk dashboard, navigate to API keys, then copy the Publishable key. It should start with pk_.",
          "Step 3: Register your Clerk Publishable key with your instant app",
          "Go to the Instant dashboard, navigate to the Auth tab and add a new clerk app with the publishable key you copied."
        ]
      },
      {
        "title": "Usage",
        "hash": "usage",
        "content": [
          "Use Clerk's getToken helper to get a session JWT for your signed-in user. Then call Instant's db.auth.signInWithIdToken with the JWT and the client name you set on the Instant dashboard.",
          "When you call db.auth.signInWithIdToken, Instant will verify that the JWT was signed by your Clerk app. If verified, Instant use the email in the JWT's claims to lookup your user or create a new one and create a long-lived session. Be sure to call Instant's db.auth.signOut when you want to sign the user out.",
          "Here is a full example using clerk's next.js library:"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Permissions",
        "hash": null,
        "content": [
          "To secure user data, you can use Instantâ€™s Rule Language. Our rule languagetakes inspiration from Railsâ€™ ActiveRecord, Googleâ€™s CEL, and JSON.Hereâ€™s an example ruleset below",
          "You can manage permissions via configuration files or through the Instant dashboard."
        ]
      },
      {
        "title": "Permissions as code",
        "hash": "permissions-as-code",
        "content": [
          "With Instant you can define your permissions in code. If you haven't already, use the CLI to generate an instant.perms.ts file:",
          "The CLI will guide you through picking an Instant app and generate these files for you. Once you've made changes to instant.perms.ts, you can use the CLI to push those changes to production:"
        ]
      },
      {
        "title": "Permissions in the dashboard",
        "hash": "permissions-in-the-dashboard",
        "content": [
          "For each app in your dashboard, youâ€™ll see a permissions editor. Permissions are expressed as JSON. Each top level key represents one of your namespaces â€” for example goals, todos, and the like. There is also a special top-level key attrs for defining permissions on creating new types of namespaces and attributes."
        ]
      },
      {
        "title": "Namespaces",
        "hash": "namespaces",
        "content": [
          "For each namespace you can define allow rules for view, create, update, delete. Rules must be boolean expressions.",
          "If a rule is not set then by default it evaluates to true. The following three rulesets are all equivalent",
          "In this example we explicitly set each action for todos to true",
          "In this example we explicitly set view to be true. However, all the remainingactions for todo also default to true.",
          "In this example we set no rules, and thus all permission checks pass.",
          "When you start developing you probably won't worry about permissions. However, once you start shipping your app to users you will want to secure their data!",
          "View",
          "view rules are evaluated when doing db.useQuery. On the backend every objectthat satisfies a query will run through the view rule before being passed backto the client. This means as a developer you can ensure that no matter what querya user executes, theyâ€™ll only see data that they are allowed to see.",
          "Create, Update, Delete",
          "Similarly, for each object in a transaction, we make sure to evaluate the respective create, update, and delete rule.Transactions will fail if a user does not have adequate permission.",
          "Default permissions",
          "By default, all permissions are considered to be \"true\". To change that, use \"$default\" key. This:",
          "is equivalent to this:",
          "Specific keys can override defaults:",
          "You can use $default as the namespace:",
          "Finally, the ultimate default:"
        ]
      },
      {
        "title": "Attrs",
        "hash": "attrs",
        "content": [
          "Attrs are a special kind of namespace for creating new types of data on the fly.Currently we only support creating attrs. During development you likely don'tneed to lock this rule down, but once you ship you will likely want to set thispermission to false",
          "Suppose our data model looks like this",
          "And we have a rules defined as",
          "Then we could create goals with existing attr types:",
          "But we would not be able to create goals with new attr types:"
        ]
      },
      {
        "title": "CEL expressions",
        "hash": "cel-expressions",
        "content": [
          "Inside each rule, you can write CEL code that evaluates to either true or false.",
          "The above example shows a taste of the kind of rules you can write :)",
          "data",
          "data refers to the object you have saved. This will be populated when used for view, create, update, and delete rules",
          "newData",
          "In update, you'll also have access to newData. This refers to the changes that are being made to the object.",
          "bind",
          "bind allows you to alias logic. The following are equivalent",
          "bind is useful for not repeating yourself and tidying up rules",
          "ref",
          "You can also refer to relations in your permission checks. This rule restrictsdelete to only succeed on todos associated with a specific user email.",
          "ref works on the auth object too. Here's how you could restrict deletes to users with the 'admin' role:",
          "See managing users to learn more about that."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Managing users",
        "hash": null,
        "content": []
      },
      {
        "title": "See users in your app",
        "hash": "see-users-in-your-app",
        "content": [
          "You can manage users in your app using the $users namespace. This namespace isautomatically created when you create an app.",
          "You'll see the $users namespace in the Explorer tab with allthe users in your app!"
        ]
      },
      {
        "title": "Querying users",
        "hash": "querying-users",
        "content": [
          "The $users namespace can be queried like any normal namespace. However, we'veset some default permissions so that only a logged-in user can view their owndata.",
          "Right now $users is a read-only namespace. You can override the viewpermission to whatever you like, but create, delete, and updateare restricted."
        ]
      },
      {
        "title": "Adding properties",
        "hash": "adding-properties",
        "content": [
          "Although you cannot directly add properties to the $users namespace, you cancreate links to other namespaces. Here is an example of a schema for a todo app that has users,roles, profiles, and todos:",
          "Links",
          "We created three links todoOwner, userRoles, and userProfiles to link the $usersnamespace to the todos, roles, and profiles namespaces respectively:",
          "Notice that the $users namespace is in the reverse direction for all links. If you try to create a link with $users in the forward direction, you'll get an error.",
          "Attributes",
          "Now take a look at the profiles namespace:",
          "You may be wondering why we didn't add nickname directly to the $users namespace. This isbecause the $users namespace is read-only and we cannot add properties to it.If you want to add additional properties to a user, you'll need to create anew namespace and link it to $users.",
          "Once done, you can include user information in the client like so:",
          "If attr creation on the client is enabled,you can also create new links without having to define them in the schema. Inthis case you can only link to $users and not from $users."
        ]
      },
      {
        "title": "User permissions",
        "hash": "user-permissions",
        "content": [
          "You can reference the $users namespace in your permission rules just like anormal namespace. For example, you can restrict a user to only update their owntodos like so:",
          "You can also traverse the $users namespace directly from the auth object viaauth.ref. When using auth.ref the arg must start with $user. Here's theequivalent rule to the one above using auth.ref:",
          "By creating links to $users and leveraging auth.ref, you can expressively buildmore complex permission rules."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Presence, Cursors, and Activity",
        "hash": null,
        "content": [
          "Sometimes you want to show real-time updates to users without persisting thedata to your database. Common scenarios include:",
          "Shared cursors in a collaborative whiteboard like Figma",
          "Who's online in a document editor like Google Docs",
          "Typing indicators in chat apps like Discord",
          "Live reactions in a video streaming app like Twitch",
          "Instant provides three primitives for quickly building these ephemeral experiences: rooms, presence, and topics.",
          "Rooms",
          "A room represents a temporary context for realtime events. Users in the same room will receive updates from every other user in that room.",
          "Presence",
          "Presence is an object that each peer shares with every other peer. When a user updates their presence, it's instantly replicated to all users in that room. Presence persists throughout the remainder of a user's connection, and is automatically cleaned up when a user leaves the room",
          "You can use presence to build features like \"who's online.\" Instant's cursor and typing indicator are both built on top of the presence API.",
          "Topics",
          "Topics have \"fire and forget\" semantics, and are better suited for data that don't need any sort of persistence. When a user publishes a topic, a callback is fired for every other user in the room listening for that topic.",
          "You can use topics to build features like \"live reactions.\" The real-time emoji button panel on Instant's homepage is built using the topics API.",
          "Transact vs. Ephemeral",
          "You may be thinking when would I use transact vs presence vs topics? Here's a simple breakdown:",
          "Use transact when you need to persist data to the db. For example, when a user sends a message in a chat app.",
          "Use presence when you need to persist data in a room but not to the db. For example, showingwho's currently viewing a document.",
          "Use topics when you need to broadcast data to a room, but don't need to persist it. For example, sending a live reaction to a video stream."
        ]
      },
      {
        "title": "Setup",
        "hash": "setup",
        "content": [
          "To obtain a room reference, call db.room(roomType, roomId)"
        ]
      },
      {
        "title": "Typesafety",
        "hash": "typesafety",
        "content": [
          "By default rooms accept any kind of data. However, you can enforce typesafety with a schema:",
          "Here's how we could add typesafety to our chat rooms:",
          "Once you've updated your schema, you'll start seeing types in your intellisense:"
        ]
      },
      {
        "title": "Presence",
        "hash": "presence",
        "content": [
          "One common use case for presence is to show who's online.",
          "Instant's usePresence is similar in feel to useState. It returns an object containing the current user's presence state, the presence state of every other user in the room, and a function (publishPresence) to update the current user's presence. publishPresence is similar to React's setState, and will merge the current and new presence objects.",
          "usePresence accepts a second parameter to select specific slices of user's presence object.",
          "You may also specify an array of peers and a user flag to further constrain the output. If you wanted a \"write-only\" hook, it would look like this:"
        ]
      },
      {
        "title": "Topics",
        "hash": "topics",
        "content": [
          "Instant provides 2 hooks for sending and handling events for a given topic. usePublishTopic returns a function you can call to publish an event, and useTopicEffect will be called each time a peer in the same room publishes a topic event.",
          "Here's a live reaction feature using topics. You can also play with it live on our examples page"
        ]
      },
      {
        "title": "Cursors and Typing Indicators (React only)",
        "hash": "cursors-and-typing-indicators-react-only",
        "content": [
          "We wanted to make adding real-time features to your apps as simple as possible, so we shipped our React library with 2 drop-in utilities: Cursors and useTypingIndicator.",
          "Cursors",
          "Adding multiplayer cursors to your app is as simple as importing our <Cursors> component!",
          "You can provide a renderCursor function to return your own custom cursor component.",
          "You can render multiple cursor spaces. For instance, imagine you're building a screen with multiple tabs. You want to only show cursors on the same tab as the current user. You can provide each <Cursors /> element with their own spaceId.",
          "Typing indicators",
          "useTypingIndicator is a small utility useful for building inputs for chat-style apps. You can use this hook to show things like \"<user> is typing...\" in your chat app."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Instant CLI",
        "hash": null,
        "content": [
          "The Instant CLI was designed to drive your Instant application entirely from a project's codebase. You can create apps, define your data model, and update your permissions, all through your terminal."
        ]
      },
      {
        "title": "Init",
        "hash": "init",
        "content": [
          "To get started, head on over to your project's root repository, and write:",
          "This will guide you through picking an Instant app and generate two files for you:",
          "instant.schema.ts defines your application's data model.",
          "instant.perms.ts defines your permission rules.",
          "To learn how to change instant.schema.ts, check our Modeling Data. For instant.perms.ts, check out the permissions page."
        ]
      },
      {
        "title": "Push",
        "hash": "push",
        "content": [
          "When you're ready to publish your changes to instant.schema.ts, run:",
          "This will evaluate your schema, compare it with production, and migrate your data model.",
          "push schema doesn't support renaming or deleting attributes yet. To do this, use the Explorer",
          "Similarily, when you change instant.perms.ts, you can run:"
        ]
      },
      {
        "title": "Pull",
        "hash": "pull",
        "content": [
          "Sometimes, you change your schema or rules from your Explorer. If you want to pull the latest version of schema and perms for production, write:",
          "This will generate new instant.schema.ts and instant.perms.ts files, based on your production state."
        ]
      },
      {
        "title": "App ID",
        "hash": "app-id",
        "content": [
          "Whenever you run a CLI command, we look up your app id. You can either provide an app id as an option:",
          "Or store it in your .env file:",
          "As a convenience, apart from INSTANT_APP_ID, we also check for:",
          "NEXT_PUBLIC_INSTANT_APP_ID for next apps,",
          "PUBLIC_INSTANT_APP_ID for svelte apps,",
          "VITE_INSTANT_APP_ID for vite apps",
          "NUXT_PUBLIC_INSTANT_APP_ID for nuxt apps",
          "EXPO_PUBLIC_INSTANT_APP_ID for expo apps"
        ]
      },
      {
        "title": "Where to save files",
        "hash": "where-to-save-files",
        "content": [
          "By default, Instant will search for your instant.schema.ts and instant.perms.ts file in:",
          "The root directory: ./",
          "The src directory: ./src",
          "The app directory: ./app",
          "If you'd like to save them in a custom location, you can set the following environment variables:",
          "INSTANT_SCHEMA_FILE_PATH sets the location for your instant.schema.ts file.",
          "INSTANT_RULES_FILE_PATH sets the location for your instant.perms.ts file."
        ]
      },
      {
        "title": "Authenticating in CI",
        "hash": "authenticating-in-ci",
        "content": [
          "In CI or similer environments, you may want to handle authentication without having to go through a web-based validation step each time.",
          "In these cases, you can provide a INSTANT_CLI_AUTH_TOKEN environment variable.",
          "To obtain a token for later use, run:",
          "Instead of saving the token to your local device, the CLI will print it to your console. You can copy this token and provide it as INSTANT_CLI_AUTH_TOKEN later in your CI tool."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Devtool",
        "hash": null,
        "content": [
          "When you load your app in development, you'll notice a little \"Instant\" Icon show up:",
          "This is your handy devtool shortcut. Once you click it, you'll see a widget that lets you make changes to your app.",
          "Use the Explorer to change up your data and schema:",
          "Or the Sandbox to try out different queries and transactions:"
        ]
      },
      {
        "title": "Changing Positions",
        "hash": "changing-positions",
        "content": [
          "You can choose where to position your devtool as well. Pass in the devtool configuration in init:",
          "You can set bottom-left, top-left, top-right, bottom-right."
        ]
      },
      {
        "title": "Custom Hosts",
        "hash": "custom-hosts",
        "content": [
          "By default, the devtool only shows up on localhost. But you can decide which hosts to show it on too. Pass in the allowedHosts option:"
        ]
      },
      {
        "title": "Disabling the devtool",
        "hash": "disabling-the-devtool",
        "content": [
          "If you would like to hide the devtool completely, you can add devtool: false in init:"
        ]
      },
      {
        "title": "Shortcuts",
        "hash": "shortcuts",
        "content": [
          "To quickly toggle the window, you can use the shortcut ctrl + shit + 0 (zero)"
        ]
      },
      {
        "title": "Feedback?",
        "hash": "feedback",
        "content": [
          "If you have any feedback, let us know on Discord"
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Custom emails",
        "hash": null,
        "content": [
          "You can customize all aspects of your Instant app's \"magic code\" email: the body (plain text or HTML), subject, sender name, and even the from address."
        ]
      },
      {
        "title": "Dashboard",
        "hash": "dashboard",
        "content": [
          "To start, go to your Dashboard's auth tab. Click \"Custom Magic Code Email\", and you're ready to go.",
          "Variables",
          "We provide a handful of variables you can use in both your subject line and body template:",
          "{code}, the magic code, e.g. 123456. Note, this variable is required in both the subject and body.",
          "{user_email}, the recipient user's email address, e.g. happyuser@gmail.com",
          "{app_title}, your app's name",
          "Using a variable is as easy as adding the variable's name in curly brackets, e.g. {variable_name}."
        ]
      },
      {
        "title": "Custom sender addresses",
        "hash": "custom-sender-addresses",
        "content": [
          "You can also set Instant's email's from and reply-to fields to an address on your own domain.",
          "If you provide a custom sender address, you'll need to confirm it before we can start delivering from it.",
          "Our email partner, Postmark, will send a confirmation to the provided address with a link to verify. Until the address is verified, emails will continue to be sent from Instant's default auth sender (auth@pm.instantdb.com)."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "App teams",
        "hash": null,
        "content": [
          "Apps with a Pro subscription can be managed by multiple users. To add team members to your app, head on over to the Dashboard Admin tab."
        ]
      },
      {
        "title": "Roles",
        "hash": "roles",
        "content": [
          "App team members can have one of three roles: collaborator, admin or owner.",
          "Collaborators",
          "Can view the Explorer, update Permissions, and configure Auth.",
          "Admins",
          "Can invite other team members.",
          "Owners (i.e., an app's creator)",
          "Can access the Billing tab.",
          "Can regenerate the app's admin tokens.",
          "Can delete their app."
        ]
      },
      {
        "title": "Invites",
        "hash": "invites",
        "content": [
          "Inviting a team member",
          "A pro app's admin or owner simply needs to navigate to the Dashboard Admin tab and click \"Invite a team member\". This will open a dialog that accepts an email and role. This will send an email with instructions to the specified address.",
          "Accepting an invite",
          "Once an invited user signs up for Instant, they can access the Dashboard Invites section where they can accept or decline the invite."
        ]
      }
    ]
  },
  {
    "sections": [
      {
        "title": "Storage",
        "hash": null,
        "content": [
          "Instant Storage makes it simple to upload and serve files for your app.You can store images, videos, documents, and any other file type."
        ]
      },
      {
        "title": "Storage quick start",
        "hash": "storage-quick-start",
        "content": [
          "Let's build a full example of how to upload and display a grid of images",
          "Initialize your schema and permissions via the cli tool",
          "Now open instant.shema.ts and replace the contents with the following code.",
          "Similarly open instant.perms.ts and replace the contents with the following",
          "Push up both the schema and permissions to your Instant app with the following command",
          "And then replace the contents of app/page.tsx with the following code.",
          "With your schema, permissions, and application code set, you can now run your app!",
          "Go to localhost:3000, and you should see a simple image feed where you canupload and delete images!"
        ]
      },
      {
        "title": "Storage client SDK",
        "hash": "storage-client-sdk",
        "content": [
          "Below you'll find a more detailed guide on how to use the Storage API fromreact.",
          "Upload files",
          "Use db.storage.uploadFile(path, file, opts?) to upload a file.",
          "path determines where the file will be stored, and can be used with permissions to restrict access to certain files.",
          "file should be a File type, which will likely come from a file-type input.",
          "opts is optional and can be used to set the contentType andcontentDisposition headers for the file.",
          "Overwrite files",
          "If the path already exists in your storage directory, it will be overwritten!",
          "If you don't want to overwrite files, you'll need to ensure that each file has a unique path.",
          "View files",
          "You can retrieve files by querying the $files namespace.",
          "You can use query filters and associations as you would with any other namespaceto filter and sort your files.",
          "Delete files",
          "Use db.storage.delete(path) to delete a file.",
          "Link files",
          "Use links to associate files with other entities in your schema.",
          "Similar to $users, links on $files can only be created in the reversedirection.",
          "Check out this repofor a more detailed example showing how you may leverage links to implement an avatar upload feature"
        ]
      },
      {
        "title": "Storage admin SDK",
        "hash": "storage-admin-sdk",
        "content": [
          "The Admin SDK offers a similar API for managing storage on the server. Permissionchecks are not enforced when using the Admin SDK, so you can use it to managefiles without worrying about authentication.",
          "Uploading files",
          "Once again, we use the db.storage.uploadFile(path, file, opts?) function to upload a file on the backend.",
          "Note that unlike our browser SDK, the file argument must be a Buffer. Inthis case you'll likely want to at least specify the contentType in theoptions otherwise the default content-type will be application/octet-stream.",
          "View Files",
          "Retrieving files is similar to the client SDK, but we use db.query() insteadof db.useQuery().",
          "Delete files",
          "There are two ways to delete files with the admin SDK:",
          "db.storage.delete(pathname: string)",
          "db.storage.deleteMany(pathnames: string[])",
          "These allow you to either delete a single file, or bulk delete multiple files at a time."
        ]
      },
      {
        "title": "Permissions",
        "hash": "permissions",
        "content": [
          "By default, Storage permissions are disabled. This means that until you explicitly set permissions, no uploads or downloads will be possible.",
          "create permissions enable uploading $files",
          "view permissions enable viewing $files",
          "delete permissions enable deleting $files",
          "view permissions on $files and update permisssions on the forward entity enabling linking and unlinking $files",
          "In your permissions rules, you can use auth to access the currently authenticated user, and data to access the file metadata.",
          "At the moment, the only available file metadata is data.path, which represents the file's path in Storage. Here are some example permissions",
          "Allow anyone to upload and retrieve files (easy to play with but not recommended for production):",
          "Allow all authenticated users to view and upload files:",
          "Authenticated users may only upload and view files from their own subdirectory:"
        ]
      }
    ]
  }
]